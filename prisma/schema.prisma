// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(100)
  username  String    @db.VarChar(50)
  imageUrl  String?
  imageId   String?
  password  String    @db.VarChar(120)
  addedAt   DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  hotels    Hotel[]
  rooms     Room[]
  bookings  Booking[]
}

model Hotel {
  id                  String    @id @default(uuid())
  userId              Int
  title               String    @db.VarChar(120)
  description         String    @db.VarChar(1500)
  imageUrl            String
  imageId             String
  country             String
  state               String?
  city                String?
  locationDescription String    @db.VarChar(1500)
  gym                 Boolean
  spa                 Boolean
  laundry             Boolean
  restaurant          Boolean
  shopping            Boolean
  freeParking         Boolean
  bikeRental          Boolean
  movieNights         Boolean
  swimmingPool        Boolean
  coffeeShop          Boolean
  addedAt             DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  rooms               Room[]
  booking             Booking[]
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@fulltext([title])
}

model Room {
  id             String    @id @default(uuid())
  title          String    @db.VarChar(120)
  description    String    @db.VarChar(500)
  bedCount       Int       @default(0)
  guestCount     Int?      @default(0)
  bathroomCount  Int       @default(0)
  kingBed        Int?      @default(0)
  queenBed       Int?      @default(0)
  imageId        String
  imageUrl       String
  breakFastPrice Int
  roomPrice      Int
  roomservice    Boolean   @default(false)
  tv             Boolean   @default(false)
  balcony        Boolean   @default(false)
  freeWifi       Boolean   @default(false)
  cityView       Boolean   @default(false)
  mountainView   Boolean   @default(false)
  airCondition   Boolean   @default(false)
  soundProofed   Boolean   @default(false)
  userId         Int
  hotelId        String
  Hotel          Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Booking        Booking[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([hotelId])
}

model Booking {
  id                String   @id @default(uuid())
  userName          String
  userEmail         String
  userId            Int
  roomId            String
  hotelId           String
  hotelOwnerId      String
  startDate         DateTime
  endDate           DateTime
  breakfastIncluded Boolean
  currency          String
  totalPrice        Int
  paymentStatus     Boolean  @default(false)
  paymentIntentId   String   @unique
  bookedAt          DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Hotel             Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Room              Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([hotelId])
  @@index([roomId])
}
